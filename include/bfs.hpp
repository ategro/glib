#ifndef NSU_BFS
#define NSU_BFS

#include <vector>

/** 
	@file bfs.hpp
 */

/**
	@brief Алгоритм обхода в ширину
	@param[in] graph - список смежности вершин
	@param[in] start - стартовая вершина
	@param[in, out] used - посещенные вершины
	@param[in, out] distance - растояние от start до вершин
	@param[in, out] parent - родители вершин

	На вход алгоритма подаётся заданный граф (невзвешенный), и номер стартовой
	вершины start. Граф может быть как ориентированным, так и
	неориентированным, для алгоритма это не важно.

	Сам алгоритм можно понимать как процесс "поджигания" графа: на нулевом шаге
	поджигаем только вершину start. На каждом следующем шаге огонь с каждой уже
	горящей вершины перекидывается на всех её соседей; т.е. за одну итерацию
	алгоритма происходит расширение "кольца огня" в ширину на единицу (отсюда
	и название алгоритма).

	Более строго это можно представить следующим образом. Создадим очередь q, в
	которую будут помещаться горящие вершины, а также заведём булевский массив
	used[], в котором для каждой вершины будем отмечать, горит она уже или нет
	(или иными словами, была ли она посещена).

	Изначально в очередь помещается только вершина start, и used[start] = true,
	а для всех остальных вершин used[] = false. Затем алгоритм представляет
	собой цикл: пока очередь не пуста, достать из её головы одну вершину,
	просмотреть все рёбра, исходящие из этой вершины, и если какие-то из
	просмотренных вершин ещё не горят, то поджечь их и поместить в конец
	очереди.

	В итоге, когда очередь опустеет, обход в ширину обойдёт все достижимые из
	start вершины, причём до каждой дойдёт кратчайшим путём. Также можно
	посчитать длины кратчайших путей (для чего просто надо завести массив длин
	путей distance[]), и компактно сохранить информацию, достаточную для
	восстановления всех этих кратчайших путей (для этого надо завести массив 
	"предков" parent[], в котором для каждой вершины хранить номер вершины, по
	которой мы попали в эту вершину).
 */

void bfs(const std::vector<std::vector<int>> & graph, const int start, 
		std::vector<bool> & used, std::vector<int> & distance, 
		std::vector<int> & parent);

#endif
