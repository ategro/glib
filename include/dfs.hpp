#ifndef NSU_DFS
#define NSU_DFS

#include <vector>

/** 
	@file dfs.hpp
 */

/**
	@brief Алгоритм обхода в глубину
	@param[in] graph - список смежности вершин
	@param[in] start - стартовая вершина
	@param[in, out] color - цвета (0, 1, 2) вершин
	@param[in, out] time_in - времена входов в вершины
	@param[in, out] time_out - времена выходов из вершин
	@param[in, out] start_time - начальное время
	@return end_time - время окончания обхода графа

	На вход алгоритма подаётся заданный граф (невзвешенный), и номер стартовой
	вершины start. Граф может быть как ориентированным, так и
	неориентированным, для алгоритма это не важно.

	Стратегия поиска в глубину состоит в том, чтобы идти «вглубь» графа,
	насколько это возможно. Алгоритм поиска описывается рекурсивно: перебираем
	все исходящие из рассматриваемой вершины рёбра. Если ребро ведёт в
	вершину, которая не была рассмотрена ранее, то запускаем алгоритм от этой
	нерассмотренной вершины, а после возвращаемся и продолжаем перебирать
	рёбра. Возврат происходит в том случае, если в рассматриваемой вершине не
	осталось рёбер, которые ведут в нерассмотренную вершину. Если после
	завершения алгоритма не все вершины были рассмотрены, то необходимо
	запустить алгоритм от одной из нерассмотренных вершин.
	
	В результате поиска в глубину находится лексикографически первый путь в
	графе.
 */

int dfs(const std::vector<std::vector<int>> & graph, const int start, 
		std::vector<int> & color, std::vector<int> & time_in, 
		std::vector<int> & time_out, int start_time = 0);

#endif
